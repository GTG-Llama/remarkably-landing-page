server {
    listen 80;
    listen [::]:80;
    server_name remarkably.ink www.remarkably.ink;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name remarkably.ink www.remarkably.ink;
    
    # SSL configuration (update paths as needed)
    # ssl_certificate /path/to/your/certificate.crt;
    # ssl_certificate_key /path/to/your/private.key;
    
    # Document root - UPDATE THIS PATH to where your dist folder is deployed
    root /var/www/remarkably;
    index index.html;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains" always;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    
    # Cache static assets (CSS, JS, images, fonts)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|mp4|webm|ogg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        try_files $uri =404;
    }
    
    # Handle specific files
    location = /robots.txt {
        try_files $uri =404;
        access_log off;
    }
    
    location = /sitemap.xml {
        try_files $uri =404;
        access_log off;
    }
    
    location = /site.webmanifest {
        try_files $uri =404;
        access_log off;
    }
    
    location = /favicon.ico {
        try_files $uri =404;
        access_log off;
    }
    
    # Handle the landing subfolder specifically
    location /landing/ {
        try_files $uri $uri/ /landing/index.html;
    }
    
    # Handle SEO folder
    location /seo/ {
        try_files $uri $uri/ =404;
    }
    
    # CRITICAL: SPA routing - this is the main fix
    # Handle all other routes by serving index.html
    location / {
        try_files $uri $uri/ /index.html;
        
        # Prevent caching of HTML files
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # Optional: Handle API routes if you have a backend
    location /api/ {
        # proxy_pass http://your-backend-server;
        # proxy_set_header Host $host;
        # proxy_set_header X-Real-IP $remote_addr;
        # For now, return 404 if no backend
        return 404;
    }
    
    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /index.html;
}